CREATE TABLE customer(
	customer_id VARCHAR(100),
	customer_unique_id varchar(100),
	customer_zip_code_prefix NUMERIC,
	customer_city VARCHAR(50),
	customer_state CHAR(2)
);

SELECT  * FROM customer

COPY customer (customer_id, customer_unique_id,	customer_zip_code_prefix,	customer_city,	customer_state)
FROM 'F:/Ecommerce/olist_customers_dataset.csv'
DELIMITER','
CSV HEADER



CREATE TABLE geolocation(
	geolocation_zip_code_prefix INT,
	geolocation_lat NUMERIC,
	geolocation_lng NUMERIC,
	geolocation_city VARCHAR(50),
	geolocation_state CHAR(3)
);


COPY geolocation
FROM 'F:/Ecommerce/olist_geolocation_dataset.csv'
DELIMITER','
CSV HEADER

SELECT * FROM geolocation


CREATE TABLE order_items(
order_id VARCHAR(50),
order_item_id INT,
product_id VARCHAR(50),
seller_id VARCHAR(50),
shipping_limit_date DATE,
price DECIMAL(8,2),
freight_value DECIMAL(8,2)
);


COPY order_items
FROM 'F:/Ecommerce/olist_order_items_dataset.csv'
DELIMITER','
CSV HEADER


CREATE TABLE order_payment(
	order_id VARCHAR(50),
	payment_sequential NUMERIC,
	payment_type VARCHAR(50),
	payment_installments NUMERIC,
	payment_value DECIMAL(8,2)
);


COPY order_payment
FROM 'F:/Ecommerce/olist_order_payments_dataset.csv'
DELIMITER','
CSV HEADER;


CREATE TABLE order_review(
	review_id VARCHAR(50),
	order_id VARCHAR(50),
	review_score NUMERIC,
	review_comment_title VARCHAR(100),
	review_comment_message VARCHAR(500),
	review_creation_date DATE,
	review_answer_timestamp DATE
);


COPY order_review
FROM 'F:/Ecommerce/olist_order_reviews_dataset.csv'
DELIMITER','
CSV HEADER;


CREATE TABLE orders(
	order_id VARCHAR(100),
	customer_id VARCHAR(100),
	order_status VARCHAR(50),
	order_purchase_timestamp DATE,
	order_approved_at DATE,
	order_delivered_carrier_date DATE,
	order_delivered_customer_date DATE,
	order_estimated_delivery_date DATE
);


COPY orders
FROM 'F:/Ecommerce/olist_orders_dataset.csv'
DELIMITER','
CSV HEADER;


CREATE TABLE products(
	product_id VARCHAR(100),
	product_category_name VARCHAR(50),
	product_name_lenght NUMERIC,
	product_description_lenght NUMERIC,
	product_photos_qty NUMERIC,
	product_weight_g NUMERIC,
	product_length_cm NUMERIC,
	product_height_cm NUMERIC,
	product_width_cm NUMERIC
	);




COPY products
FROM 'F:/Ecommerce/olist_products_dataset.csv'
DELIMITER','
CSV HEADER;


CREATE TABLE order_items(
order_id,
order_item_id,
product_id,
seller_id,
shipping_limit_date,
price,
freight_value

);


CREATE TABLE sellers(
	seller_id VARCHAR(100),
	seller_zip_code_prefix NUMERIC,
	seller_city VARCHAR(100),
	seller_state CHAR(2)
	);


COPY sellers
FROM 'F:/Ecommerce/olist_sellers_dataset.csv'
DELIMITER','
CSV HEADER;


CREATE TABLE product_category(
	product_category_name VARCHAR(100),
	product_category_name_english VARCHAR(100)
);


COPY product_category
FROM 'F:/Ecommerce/product_category_name_translation.csv'
DELIMITER','
CSV HEADER;



SELECT * FROM customer;

SELECT * FROM geolocation;

SELECT * FROM order_payment;

SELECT * FROM order_review;

SELECT * FROM orders;

SELECT * FROM products;

SELECT * FROM sellers;

SELECT * FROM product_category;

SELECT * FROM order_items;



-- 1]  Total number of orders placed on the platform.

SELECT COUNT(order_id) FROM orders


--2]  Top 10 product categories by number of orders.

SELECT
	PCT.PRODUCT_CATEGORY_NAME_ENGLISH AS CATEGORY,
	COUNT(DISTINCT OI.ORDER_ID) AS TOTAL_ORDERS
FROM
	ORDER_ITEMS OI
	JOIN PRODUCTS P ON OI.PRODUCT_ID = P.PRODUCT_ID
	JOIN PRODUCT_CATEGORY PCT ON P.PRODUCT_CATEGORY_NAME = PCT.PRODUCT_CATEGORY_NAME
GROUP BY
	PCT.PRODUCT_CATEGORY_NAME_ENGLISH
ORDER BY
	TOTAL_ORDERS DESC
LIMIT
	10;


-- 3]  Total revenue generated by each product category.

SELECT
	PCT.PRODUCT_CATEGORY_NAME_ENGLISH,
	ROUND(SUM(OP.PRICE), 2) AS TOTAL_REVENUE
FROM
	ORDER_ITEMS OP
	JOIN PRODUCTS P ON OP.PRODUCT_ID = P.PRODUCT_ID
	JOIN PRODUCT_CATEGORY PCT ON P.PRODUCT_CATEGORY_NAME = PCT.PRODUCT_CATEGORY_NAME
GROUP BY
	PCT.PRODUCT_CATEGORY_NAME_ENGLISH
ORDER BY
	TOTAL_REVENUE DESC;


-- 4] Monthly trend of orders and revenue over time.


SELECT
	EXTRACT(
		MONTH
		FROM
			O.ORDER_PURCHASE_TIMESTAMP
	) AS MONTHS,
	EXTRACT(
		YEAR
		FROM
			O.ORDER_PURCHASE_TIMESTAMP
	) AS YEARS,
	COUNT(DISTINCT O.ORDER_ID),
	ROUND(SUM(OI.PRICE), 2) AS TOTAL_REVENUE
FROM
	ORDERS O
	JOIN ORDER_ITEMS OI ON O.ORDER_ID = OI.ORDER_ID
GROUP BY
	YEARS,
	MONTHS
ORDER BY
	YEARS,
	MONTHS



-- 5] Which sellers generated the most revenue?

SELECT
	S.SELLER_CITY,
	S.SELLER_STATE,
	S.SELLER_ID,
	ROUND(SUM(OD.PRICE), 2) AS TOTAL_REVENUE
FROM
	ORDER_ITEMS AS OD
	JOIN SELLERS S ON OD.SELLER_ID = S.SELLER_ID
GROUP BY
	S.SELLER_ID,
	S.SELLER_CITY,
	S.SELLER_STATE
ORDER BY
	TOTAL_REVENUE DESC
LIMIT
	1;



-- 6] Top 5 cities with the highest number of customers.

SELECT
	CUSTOMER_CITY,
	CUSTOMER_STATE,
	COUNT(CUSTOMER_ID) AS TOTAL_CUSTOMER
FROM
	CUSTOMER
GROUP BY
	CUSTOMER_CITY,
	CUSTOMER_STATE
ORDER BY
	TOTAL_CUSTOMER DESC LIMIT
	5;



-- 7] Average number of items per order.

SELECT
	AVG(AV_ITEMS) ITEM_PER_ORDER
FROM
	(
		SELECT
			ORDER_ID,
			COUNT(*) AS AV_ITEMS
		FROM
			ORDER_ITEMS
		GROUP BY
			ORDER_ID);


-- 8] Which state has the most customers?

SELECT
	CUSTOMER_STATE,
	COUNT(CUSTOMER_ID) AS TOTAL_CUSTOMER
FROM
	CUSTOMER
GROUP BY
	CUSTOMER_STATE
ORDER BY
	TOTAL_CUSTOMER DESC



-- 9] Repeat vs one-time customers â€“ how many customers ordered more than once?


SELECT
	CASE
		WHEN ORDER_COUNT = 1 THEN 'One Time Customer'
		ELSE 'Repeat Customer'
	END AS CUSTOMER_TYPE,
	COUNT(*)
FROM
	(
		SELECT
			CUSTOMER_ID,
			COUNT(ORDER_ID) AS ORDER_COUNT
		FROM
			ORDERS
		GROUP BY
			CUSTOMER_ID
	) AS ORDER_SUMMARY
GROUP BY
	CUSTOMER_TYPE




-- 10] Which payment method is most commonly used?

SELECT
	PAYMENT_TYPE,
	COUNT(PAYMENT_TYPE) AS TOTAL_COUNT
FROM
	ORDER_PAYMENT
GROUP BY
	PAYMENT_TYPE
ORDER BY
	TOTAL_COUNT DESC



-- 11] Average delivery time (difference between order delivered date and purchase date).

SELECT
	ROUND(
		AVG(
			ORDER_DELIVERED_CUSTOMER_DATE - ORDER_PURCHASE_TIMESTAMP
		),
		2
	) AS AVG_DELIVERY_DAY
FROM
	ORDERS
WHERE
	ORDER_DELIVERED_CUSTOMER_DATE IS NOT NULL
	AND ORDER_PURCHASE_TIMESTAMP IS NOT NULL



-- 12] Top 5 product categories with the longest delivery times.


SELECT
	PC.PRODUCT_CATEGORY_NAME_ENGLISH,
	ROUND(
		AVG(
			O.ORDER_DELIVERED_CUSTOMER_DATE - O.ORDER_PURCHASE_TIMESTAMP
		),
		2
	) AS AVG_DELIVERY_DAYS
FROM
	PRODUCT_CATEGORY PC
	JOIN PRODUCTS P ON PC.PRODUCT_CATEGORY_NAME = P.PRODUCT_CATEGORY_NAME
	JOIN ORDER_ITEMS OI ON P.PRODUCT_ID = OI.PRODUCT_ID
	JOIN ORDERS O ON O.ORDER_ID = OI.ORDER_ID
WHERE
	O.ORDER_DELIVERED_CUSTOMER_DATE IS NOT NULL
	AND O.ORDER_PURCHASE_TIMESTAMP IS NOT NULL
GROUP BY
	PC.PRODUCT_CATEGORY_NAME_ENGLISH
ORDER BY
	AVG_DELIVERY_DAYS DESC
LIMIT
	5;



-- 13] How many orders were delivered late compared to estimated delivery date?

SELECT
	CASE
		WHEN ORDER_DELIVERED_CUSTOMER_DATE > ORDER_ESTIMATED_DELIVERY_DATE THEN 'Late DeliverY'
		ELSE 'Early or On Time Delivery'
	END AS DELIVER_STATUS,
	COUNT(ORDER_ID) AS TOTAL_ORDERS
FROM
	ORDERS
WHERE
	ORDER_DELIVERED_CUSTOMER_DATE IS NOT NULL
	AND ORDER_ESTIMATED_DELIVERY_DATE IS NOT NULL
GROUP BY
	DELIVER_STATUS
ORDER BY
	TOTAL_ORDERS;





